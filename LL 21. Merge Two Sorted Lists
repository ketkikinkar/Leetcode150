21. Merge Two Sorted Lists
You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

Example 1:
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]
Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode()
        tail = dummy
        while l1 and l2:
            if l1.val < l2.val:
                tail.next = l1
                l1 = l1.next
            else:
                tail.next = l2
                l2 = l2.next
            tail = tail.next
        if l1:
            tail.next = l1
        if l2:
            tail.next = l2
        return dummy.next
"""
Time complexity : O(n+m)
Because exactly one of l1 and l2 is incremented on each loop
iteration, the while loop runs for a number of iterations equal to the
sum of the lengths of the two lists. All other work is constant, so the
overall complexity is linear.

Space complexity : O(1)
The iterative approach only allocates a few pointers, so it has a
constant overall memory footprint.

This solution implements the merging of two sorted linked lists into one sorted linked list. The approach utilizes a dummy node to facilitate the easy construction of the new merged list and a tail pointer to keep track of the end of this growing list.

The core of the solution is a while loop that continues as long as there are elements in both input lists, l1 and l2. Inside this loop, we compare the current values of l1 and l2. The node with the smaller value is appended to the merged list, and the tail pointer is moved to this node. Then, we advance the pointer (l1 or l2) that pointed to the smaller value node to the next node in its list.

After exiting the loop, it's possible that one of the lists still has remaining nodes (since one list may be longer than the other). At this point, we simply append the remainder of the non-empty list to the merged list. This is done by setting tail.next to whichever of l1 or l2 is not null.

Finally, the method returns the merged list starting from dummy.next to skip the dummy node, which was used just for ease of implementation and does not contain data from the input lists.

This method ensures that the merged list is correctly sorted and efficiently combines the two lists without additional space, except for the dummy node. The time complexity of the algorithm is O(n + m), where n and m are the lengths of the two input lists, because it processes each node in both lists exactly once."
"""
