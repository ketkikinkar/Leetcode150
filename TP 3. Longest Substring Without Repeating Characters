3. Longest Substring Without Repeating Characters - Explanation
Problem Link

Description
Given a string s, find the length of the longest substring without duplicate characters.

A substring is a contiguous sequence of characters within a string.

Example 1:

Input: s = "zxyzxyz"

Output: 3
Explanation: The string "xyz" is the longest without duplicate characters.

Example 2:

Input: s = "xxxx"

Output: 1
Constraints:

0 <= s.length <= 1000
s may consist of printable ASCII characters.


Recommended Time & Space Complexity
You should aim for a solution with O(n) time and O(m) space, where n is the length of the string and m is the number of unique characters in the string.

Hint 1
A brute force solution would be to try the substring starting at index i and try to find the maximum length we can form without duplicates by starting at that index. we can use a hash set to detect duplicates in O(1) time. Can you think of a better way?

Hint 2
We can use the sliding window algorithm. Since we only care about substrings without duplicate characters, the sliding window can help us maintain valid substring with its dynamic nature.

Hint 3
We can iterate through the given string with index r as the right boundary and l as the left boundary of the window. We use a hash set to check if the character is present in the window or not. When we encounter a character at index r that is already present in the window, we shrink the window by incrementing the l pointer until the window no longer contains any duplicates. Also, we remove characters from the hash set that are excluded from the window as the l pointer moves. At each iteration, we update the result with the length of the current window, r - l + 1, if this length is greater than the current result.

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        charSet = set()
        l = 0
        res = 0
        for r in range(len(s)):
            while s[r] in charSet:
                charSet.remove(s[l])
                l += 1
            charSet.add(s[r])
            res = max(res, r - l + 1)
        return res
        #Time: O(n) Space O(m)
"""

Space and Time Complexity:

Best Case (No repeating characters):

Time: O(n)

Space: O(min(n, m)) â€” where n is the length of the string and m is the size of the character set (e.g., 26 for lowercase English letters).

Average Case:

Time: O(n)

Space: O(min(n, m))

Worst Case (All characters are unique and scanned once):

Time: O(n)

Space: O(min(n, m))

How to Explain to an Interviewer:

"This is a sliding window approach to find the length of the longest substring without repeating characters. I use two pointers (l and r) to define the window and a set to track unique characters. When I encounter a duplicate, I shrink the window from the left until the character is removed. I update the result with the maximum window size observed. The time complexity is O(n) because each character is added and removed at most once from the set."""
